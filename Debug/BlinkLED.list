
BlinkLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e80  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002014  08002014  00003014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002040  08002040  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002040  08002040  00003040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002048  08002048  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002048  08002048  00003048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800204c  0800204c  0000304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002050  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800205c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800205c  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000706f  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012c2  00000000  00000000  0000b0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  0000c370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004a7  00000000  00000000  0000c988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000146a7  00000000  00000000  0000ce2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000077f5  00000000  00000000  000214d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080fc0  00000000  00000000  00028ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9c8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017f0  00000000  00000000  000a9cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000ab4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001ffc 	.word	0x08001ffc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001ffc 	.word	0x08001ffc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 f9ee 	bl	80008a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f82e 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8b6 	bl	8000640 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004d4:	f000 f88a 	bl	80005ec <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004de:	4810      	ldr	r0, [pc, #64]	@ (8000520 <main+0x5c>)
 80004e0:	f000 fce2 	bl	8000ea8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80004e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004e8:	f000 fa50 	bl	800098c <HAL_Delay>
	  if(HAL_UART_Transmit(&huart1, data, sizeof(data)-1, 100) != HAL_OK)
 80004ec:	2364      	movs	r3, #100	@ 0x64
 80004ee:	2211      	movs	r2, #17
 80004f0:	490c      	ldr	r1, [pc, #48]	@ (8000524 <main+0x60>)
 80004f2:	480d      	ldr	r0, [pc, #52]	@ (8000528 <main+0x64>)
 80004f4:	f001 f99a 	bl	800182c <HAL_UART_Transmit>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <main+0x3e>
		  Error_Handler();
 80004fe:	f000 f8f1 	bl	80006e4 <Error_Handler>
	  HAL_Delay(500);
 8000502:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000506:	f000 fa41 	bl	800098c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000510:	4803      	ldr	r0, [pc, #12]	@ (8000520 <main+0x5c>)
 8000512:	f000 fcc9 	bl	8000ea8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000516:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800051a:	f000 fa37 	bl	800098c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800051e:	e7db      	b.n	80004d8 <main+0x14>
 8000520:	40020800 	.word	0x40020800
 8000524:	08002014 	.word	0x08002014
 8000528:	20000028 	.word	0x20000028

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	@ 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	@ 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f001 fd32 	bl	8001fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b23      	ldr	r3, [pc, #140]	@ (80005e4 <SystemClock_Config+0xb8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	4a22      	ldr	r2, [pc, #136]	@ (80005e4 <SystemClock_Config+0xb8>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000560:	4b20      	ldr	r3, [pc, #128]	@ (80005e4 <SystemClock_Config+0xb8>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b1d      	ldr	r3, [pc, #116]	@ (80005e8 <SystemClock_Config+0xbc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000578:	4a1b      	ldr	r2, [pc, #108]	@ (80005e8 <SystemClock_Config+0xbc>)
 800057a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b19      	ldr	r3, [pc, #100]	@ (80005e8 <SystemClock_Config+0xbc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000598:	2300      	movs	r3, #0
 800059a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fc9b 	bl	8000edc <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005ac:	f000 f89a 	bl	80006e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fefe 	bl	80013cc <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005d6:	f000 f885 	bl	80006e4 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	@ 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_USART1_UART_Init+0x4c>)
 80005f2:	4a12      	ldr	r2, [pc, #72]	@ (800063c <MX_USART1_UART_Init+0x50>)
 80005f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005f6:	4b10      	ldr	r3, [pc, #64]	@ (8000638 <MX_USART1_UART_Init+0x4c>)
 80005f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <MX_USART1_UART_Init+0x4c>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <MX_USART1_UART_Init+0x4c>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <MX_USART1_UART_Init+0x4c>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <MX_USART1_UART_Init+0x4c>)
 8000612:	220c      	movs	r2, #12
 8000614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000616:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <MX_USART1_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <MX_USART1_UART_Init+0x4c>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000622:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_USART1_UART_Init+0x4c>)
 8000624:	f001 f8b2 	bl	800178c <HAL_UART_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800062e:	f000 f859 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000028 	.word	0x20000028
 800063c:	40011000 	.word	0x40011000

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <MX_GPIO_Init+0x9c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <MX_GPIO_Init+0x9c>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_GPIO_Init+0x9c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_GPIO_Init+0x9c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a18      	ldr	r2, [pc, #96]	@ (80006dc <MX_GPIO_Init+0x9c>)
 800067c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <MX_GPIO_Init+0x9c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_GPIO_Init+0x9c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a11      	ldr	r2, [pc, #68]	@ (80006dc <MX_GPIO_Init+0x9c>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_GPIO_Init+0x9c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b0:	480b      	ldr	r0, [pc, #44]	@ (80006e0 <MX_GPIO_Init+0xa0>)
 80006b2:	f000 fbf9 	bl	8000ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	4619      	mov	r1, r3
 80006ce:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <MX_GPIO_Init+0xa0>)
 80006d0:	f000 fa66 	bl	8000ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020800 	.word	0x40020800

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <Error_Handler+0x8>

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <HAL_MspInit+0x4c>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006fe:	4a0f      	ldr	r2, [pc, #60]	@ (800073c <HAL_MspInit+0x4c>)
 8000700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000704:	6453      	str	r3, [r2, #68]	@ 0x44
 8000706:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <HAL_MspInit+0x4c>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <HAL_MspInit+0x4c>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071a:	4a08      	ldr	r2, [pc, #32]	@ (800073c <HAL_MspInit+0x4c>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000720:	6413      	str	r3, [r2, #64]	@ 0x40
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <HAL_MspInit+0x4c>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a19      	ldr	r2, [pc, #100]	@ (80007c4 <HAL_UART_MspInit+0x84>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d12c      	bne.n	80007bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <HAL_UART_MspInit+0x88>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	4a17      	ldr	r2, [pc, #92]	@ (80007c8 <HAL_UART_MspInit+0x88>)
 800076c:	f043 0310 	orr.w	r3, r3, #16
 8000770:	6453      	str	r3, [r2, #68]	@ 0x44
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <HAL_UART_MspInit+0x88>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000776:	f003 0310 	and.w	r3, r3, #16
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <HAL_UART_MspInit+0x88>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a10      	ldr	r2, [pc, #64]	@ (80007c8 <HAL_UART_MspInit+0x88>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <HAL_UART_MspInit+0x88>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800079a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800079e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007ac:	2307      	movs	r3, #7
 80007ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <HAL_UART_MspInit+0x8c>)
 80007b8:	f000 f9f2 	bl	8000ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	@ 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40011000 	.word	0x40011000
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020000 	.word	0x40020000

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <NMI_Handler+0x4>

080007d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <MemManage_Handler+0x4>

080007e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000826:	f000 f891 	bl	800094c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <SystemInit+0x20>)
 8000836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800083a:	4a05      	ldr	r2, [pc, #20]	@ (8000850 <SystemInit+0x20>)
 800083c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000840:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000854:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800088c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000858:	f7ff ffea 	bl	8000830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800085c:	480c      	ldr	r0, [pc, #48]	@ (8000890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800085e:	490d      	ldr	r1, [pc, #52]	@ (8000894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000860:	4a0d      	ldr	r2, [pc, #52]	@ (8000898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000874:	4c0a      	ldr	r4, [pc, #40]	@ (80008a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000882:	f001 fb97 	bl	8001fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000886:	f7ff fe1d 	bl	80004c4 <main>
  bx  lr    
 800088a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800088c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000898:	08002050 	.word	0x08002050
  ldr r2, =_sbss
 800089c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a0:	20000074 	.word	0x20000074

080008a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008ac:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0d      	ldr	r2, [pc, #52]	@ (80008e8 <HAL_Init+0x40>)
 80008b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008b8:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <HAL_Init+0x40>)
 80008be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <HAL_Init+0x40>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a07      	ldr	r2, [pc, #28]	@ (80008e8 <HAL_Init+0x40>)
 80008ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d0:	2003      	movs	r0, #3
 80008d2:	f000 f931 	bl	8000b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d6:	200f      	movs	r0, #15
 80008d8:	f000 f808 	bl	80008ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008dc:	f7ff ff08 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023c00 	.word	0x40023c00

080008ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <HAL_InitTick+0x54>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_InitTick+0x58>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000902:	fbb3 f3f1 	udiv	r3, r3, r1
 8000906:	fbb2 f3f3 	udiv	r3, r2, r3
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f93b 	bl	8000b86 <HAL_SYSTICK_Config>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e00e      	b.n	8000938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b0f      	cmp	r3, #15
 800091e:	d80a      	bhi.n	8000936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000920:	2200      	movs	r2, #0
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f000 f911 	bl	8000b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800092c:	4a06      	ldr	r2, [pc, #24]	@ (8000948 <HAL_InitTick+0x5c>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	e000      	b.n	8000938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000000 	.word	0x20000000
 8000944:	20000008 	.word	0x20000008
 8000948:	20000004 	.word	0x20000004

0800094c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_IncTick+0x20>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_IncTick+0x24>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4413      	add	r3, r2
 800095c:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <HAL_IncTick+0x24>)
 800095e:	6013      	str	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008
 8000970:	20000070 	.word	0x20000070

08000974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return uwTick;
 8000978:	4b03      	ldr	r3, [pc, #12]	@ (8000988 <HAL_GetTick+0x14>)
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000070 	.word	0x20000070

0800098c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000994:	f7ff ffee 	bl	8000974 <HAL_GetTick>
 8000998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a4:	d005      	beq.n	80009b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <HAL_Delay+0x44>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009b2:	bf00      	nop
 80009b4:	f7ff ffde 	bl	8000974 <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d8f7      	bhi.n	80009b4 <HAL_Delay+0x28>
  {
  }
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	@ (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	@ (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	@ 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	@ 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b04:	d301      	bcc.n	8000b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00f      	b.n	8000b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <SysTick_Config+0x40>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b12:	210f      	movs	r1, #15
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f7ff ff8e 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <SysTick_Config+0x40>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b22:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <SysTick_Config+0x40>)
 8000b24:	2207      	movs	r2, #7
 8000b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	e000e010 	.word	0xe000e010

08000b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff47 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b60:	f7ff ff5c 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	6978      	ldr	r0, [r7, #20]
 8000b6c:	f7ff ff8e 	bl	8000a8c <NVIC_EncodePriority>
 8000b70:	4602      	mov	r2, r0
 8000b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff5d 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ffb0 	bl	8000af4 <SysTick_Config>
 8000b94:	4603      	mov	r3, r0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	@ 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	e159      	b.n	8000e70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	f040 8148 	bne.w	8000e6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d005      	beq.n	8000bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d130      	bne.n	8000c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4013      	ands	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	091b      	lsrs	r3, r3, #4
 8000c3e:	f003 0201 	and.w	r2, r3, #1
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d017      	beq.n	8000c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d123      	bne.n	8000ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	08da      	lsrs	r2, r3, #3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3208      	adds	r2, #8
 8000ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	f003 0307 	and.w	r3, r3, #7
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	220f      	movs	r2, #15
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	691a      	ldr	r2, [r3, #16]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	08da      	lsrs	r2, r3, #3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3208      	adds	r2, #8
 8000cde:	69b9      	ldr	r1, [r7, #24]
 8000ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	2203      	movs	r2, #3
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0203 	and.w	r2, r3, #3
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f000 80a2 	beq.w	8000e6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b57      	ldr	r3, [pc, #348]	@ (8000e88 <HAL_GPIO_Init+0x2e8>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	4a56      	ldr	r2, [pc, #344]	@ (8000e88 <HAL_GPIO_Init+0x2e8>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d36:	4b54      	ldr	r3, [pc, #336]	@ (8000e88 <HAL_GPIO_Init+0x2e8>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d42:	4a52      	ldr	r2, [pc, #328]	@ (8000e8c <HAL_GPIO_Init+0x2ec>)
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	3302      	adds	r3, #2
 8000d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	220f      	movs	r2, #15
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a49      	ldr	r2, [pc, #292]	@ (8000e90 <HAL_GPIO_Init+0x2f0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d019      	beq.n	8000da2 <HAL_GPIO_Init+0x202>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a48      	ldr	r2, [pc, #288]	@ (8000e94 <HAL_GPIO_Init+0x2f4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d013      	beq.n	8000d9e <HAL_GPIO_Init+0x1fe>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a47      	ldr	r2, [pc, #284]	@ (8000e98 <HAL_GPIO_Init+0x2f8>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d00d      	beq.n	8000d9a <HAL_GPIO_Init+0x1fa>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a46      	ldr	r2, [pc, #280]	@ (8000e9c <HAL_GPIO_Init+0x2fc>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d007      	beq.n	8000d96 <HAL_GPIO_Init+0x1f6>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a45      	ldr	r2, [pc, #276]	@ (8000ea0 <HAL_GPIO_Init+0x300>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <HAL_GPIO_Init+0x1f2>
 8000d8e:	2304      	movs	r3, #4
 8000d90:	e008      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000d92:	2307      	movs	r3, #7
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000d96:	2303      	movs	r3, #3
 8000d98:	e004      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e002      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000da2:	2300      	movs	r3, #0
 8000da4:	69fa      	ldr	r2, [r7, #28]
 8000da6:	f002 0203 	and.w	r2, r2, #3
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	4093      	lsls	r3, r2
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db4:	4935      	ldr	r1, [pc, #212]	@ (8000e8c <HAL_GPIO_Init+0x2ec>)
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3302      	adds	r3, #2
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dc2:	4b38      	ldr	r3, [pc, #224]	@ (8000ea4 <HAL_GPIO_Init+0x304>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000de6:	4a2f      	ldr	r2, [pc, #188]	@ (8000ea4 <HAL_GPIO_Init+0x304>)
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea4 <HAL_GPIO_Init+0x304>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e10:	4a24      	ldr	r2, [pc, #144]	@ (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e16:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e3a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e40:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e64:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	61fb      	str	r3, [r7, #28]
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	2b0f      	cmp	r3, #15
 8000e74:	f67f aea2 	bls.w	8000bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3724      	adds	r7, #36	@ 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40013800 	.word	0x40013800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	40020800 	.word	0x40020800
 8000e9c:	40020c00 	.word	0x40020c00
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40013c00 	.word	0x40013c00

08000ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb8:	787b      	ldrb	r3, [r7, #1]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ec4:	e003      	b.n	8000ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	041a      	lsls	r2, r3, #16
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	619a      	str	r2, [r3, #24]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e267      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d075      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000efa:	4b88      	ldr	r3, [pc, #544]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 030c 	and.w	r3, r3, #12
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	d00c      	beq.n	8000f20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f06:	4b85      	ldr	r3, [pc, #532]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f0e:	2b08      	cmp	r3, #8
 8000f10:	d112      	bne.n	8000f38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f12:	4b82      	ldr	r3, [pc, #520]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f1e:	d10b      	bne.n	8000f38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f20:	4b7e      	ldr	r3, [pc, #504]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d05b      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x108>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d157      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e242      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f40:	d106      	bne.n	8000f50 <HAL_RCC_OscConfig+0x74>
 8000f42:	4b76      	ldr	r3, [pc, #472]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a75      	ldr	r2, [pc, #468]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e01d      	b.n	8000f8c <HAL_RCC_OscConfig+0xb0>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f58:	d10c      	bne.n	8000f74 <HAL_RCC_OscConfig+0x98>
 8000f5a:	4b70      	ldr	r3, [pc, #448]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a6f      	ldr	r2, [pc, #444]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000f60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	4b6d      	ldr	r3, [pc, #436]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a6c      	ldr	r2, [pc, #432]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	e00b      	b.n	8000f8c <HAL_RCC_OscConfig+0xb0>
 8000f74:	4b69      	ldr	r3, [pc, #420]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a68      	ldr	r2, [pc, #416]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b66      	ldr	r3, [pc, #408]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a65      	ldr	r2, [pc, #404]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d013      	beq.n	8000fbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fcee 	bl	8000974 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fcea 	bl	8000974 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b64      	cmp	r3, #100	@ 0x64
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e207      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fae:	4b5b      	ldr	r3, [pc, #364]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f0      	beq.n	8000f9c <HAL_RCC_OscConfig+0xc0>
 8000fba:	e014      	b.n	8000fe6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fcda 	bl	8000974 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc4:	f7ff fcd6 	bl	8000974 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b64      	cmp	r3, #100	@ 0x64
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e1f3      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd6:	4b51      	ldr	r3, [pc, #324]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f0      	bne.n	8000fc4 <HAL_RCC_OscConfig+0xe8>
 8000fe2:	e000      	b.n	8000fe6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d063      	beq.n	80010ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00b      	beq.n	8001016 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ffe:	4b47      	ldr	r3, [pc, #284]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001006:	2b08      	cmp	r3, #8
 8001008:	d11c      	bne.n	8001044 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800100a:	4b44      	ldr	r3, [pc, #272]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d116      	bne.n	8001044 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001016:	4b41      	ldr	r3, [pc, #260]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d005      	beq.n	800102e <HAL_RCC_OscConfig+0x152>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d001      	beq.n	800102e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e1c7      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102e:	4b3b      	ldr	r3, [pc, #236]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4937      	ldr	r1, [pc, #220]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 800103e:	4313      	orrs	r3, r2
 8001040:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001042:	e03a      	b.n	80010ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d020      	beq.n	800108e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800104c:	4b34      	ldr	r3, [pc, #208]	@ (8001120 <HAL_RCC_OscConfig+0x244>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001052:	f7ff fc8f 	bl	8000974 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800105a:	f7ff fc8b 	bl	8000974 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e1a8      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106c:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001078:	4b28      	ldr	r3, [pc, #160]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4925      	ldr	r1, [pc, #148]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 8001088:	4313      	orrs	r3, r2
 800108a:	600b      	str	r3, [r1, #0]
 800108c:	e015      	b.n	80010ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800108e:	4b24      	ldr	r3, [pc, #144]	@ (8001120 <HAL_RCC_OscConfig+0x244>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001094:	f7ff fc6e 	bl	8000974 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800109c:	f7ff fc6a 	bl	8000974 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e187      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d036      	beq.n	8001134 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d016      	beq.n	80010fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <HAL_RCC_OscConfig+0x248>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d4:	f7ff fc4e 	bl	8000974 <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010dc:	f7ff fc4a 	bl	8000974 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e167      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <HAL_RCC_OscConfig+0x240>)
 80010f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f0      	beq.n	80010dc <HAL_RCC_OscConfig+0x200>
 80010fa:	e01b      	b.n	8001134 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <HAL_RCC_OscConfig+0x248>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001102:	f7ff fc37 	bl	8000974 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001108:	e00e      	b.n	8001128 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800110a:	f7ff fc33 	bl	8000974 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d907      	bls.n	8001128 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e150      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
 800111c:	40023800 	.word	0x40023800
 8001120:	42470000 	.word	0x42470000
 8001124:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001128:	4b88      	ldr	r3, [pc, #544]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 800112a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1ea      	bne.n	800110a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 8097 	beq.w	8001270 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001146:	4b81      	ldr	r3, [pc, #516]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10f      	bne.n	8001172 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b7d      	ldr	r3, [pc, #500]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	4a7c      	ldr	r2, [pc, #496]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001160:	6413      	str	r3, [r2, #64]	@ 0x40
 8001162:	4b7a      	ldr	r3, [pc, #488]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800116e:	2301      	movs	r3, #1
 8001170:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001172:	4b77      	ldr	r3, [pc, #476]	@ (8001350 <HAL_RCC_OscConfig+0x474>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117a:	2b00      	cmp	r3, #0
 800117c:	d118      	bne.n	80011b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800117e:	4b74      	ldr	r3, [pc, #464]	@ (8001350 <HAL_RCC_OscConfig+0x474>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a73      	ldr	r2, [pc, #460]	@ (8001350 <HAL_RCC_OscConfig+0x474>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800118a:	f7ff fbf3 	bl	8000974 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001192:	f7ff fbef 	bl	8000974 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e10c      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001350 <HAL_RCC_OscConfig+0x474>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d106      	bne.n	80011c6 <HAL_RCC_OscConfig+0x2ea>
 80011b8:	4b64      	ldr	r3, [pc, #400]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 80011ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011bc:	4a63      	ldr	r2, [pc, #396]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80011c4:	e01c      	b.n	8001200 <HAL_RCC_OscConfig+0x324>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x30c>
 80011ce:	4b5f      	ldr	r3, [pc, #380]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 80011d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011d2:	4a5e      	ldr	r2, [pc, #376]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80011da:	4b5c      	ldr	r3, [pc, #368]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 80011dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011de:	4a5b      	ldr	r2, [pc, #364]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80011e6:	e00b      	b.n	8001200 <HAL_RCC_OscConfig+0x324>
 80011e8:	4b58      	ldr	r3, [pc, #352]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 80011ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011ec:	4a57      	ldr	r2, [pc, #348]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80011f4:	4b55      	ldr	r3, [pc, #340]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 80011f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011f8:	4a54      	ldr	r2, [pc, #336]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 80011fa:	f023 0304 	bic.w	r3, r3, #4
 80011fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d015      	beq.n	8001234 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001208:	f7ff fbb4 	bl	8000974 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120e:	e00a      	b.n	8001226 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001210:	f7ff fbb0 	bl	8000974 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800121e:	4293      	cmp	r3, r2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e0cb      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001226:	4b49      	ldr	r3, [pc, #292]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 8001228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0ee      	beq.n	8001210 <HAL_RCC_OscConfig+0x334>
 8001232:	e014      	b.n	800125e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001234:	f7ff fb9e 	bl	8000974 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123a:	e00a      	b.n	8001252 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800123c:	f7ff fb9a 	bl	8000974 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800124a:	4293      	cmp	r3, r2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e0b5      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001252:	4b3e      	ldr	r3, [pc, #248]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 8001254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1ee      	bne.n	800123c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800125e:	7dfb      	ldrb	r3, [r7, #23]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d105      	bne.n	8001270 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001264:	4b39      	ldr	r3, [pc, #228]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	4a38      	ldr	r2, [pc, #224]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 800126a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800126e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80a1 	beq.w	80013bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800127a:	4b34      	ldr	r3, [pc, #208]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b08      	cmp	r3, #8
 8001284:	d05c      	beq.n	8001340 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d141      	bne.n	8001312 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128e:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <HAL_RCC_OscConfig+0x478>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fb6e 	bl	8000974 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129c:	f7ff fb6a 	bl	8000974 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e087      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ae:	4b27      	ldr	r3, [pc, #156]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69da      	ldr	r2, [r3, #28]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c8:	019b      	lsls	r3, r3, #6
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d0:	085b      	lsrs	r3, r3, #1
 80012d2:	3b01      	subs	r3, #1
 80012d4:	041b      	lsls	r3, r3, #16
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012dc:	061b      	lsls	r3, r3, #24
 80012de:	491b      	ldr	r1, [pc, #108]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <HAL_RCC_OscConfig+0x478>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ea:	f7ff fb43 	bl	8000974 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f2:	f7ff fb3f 	bl	8000974 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e05c      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x416>
 8001310:	e054      	b.n	80013bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <HAL_RCC_OscConfig+0x478>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fb2c 	bl	8000974 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001320:	f7ff fb28 	bl	8000974 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e045      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_RCC_OscConfig+0x470>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x444>
 800133e:	e03d      	b.n	80013bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d107      	bne.n	8001358 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e038      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
 800134c:	40023800 	.word	0x40023800
 8001350:	40007000 	.word	0x40007000
 8001354:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <HAL_RCC_OscConfig+0x4ec>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d028      	beq.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001370:	429a      	cmp	r2, r3
 8001372:	d121      	bne.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137e:	429a      	cmp	r2, r3
 8001380:	d11a      	bne.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001388:	4013      	ands	r3, r2
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800138e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001390:	4293      	cmp	r3, r2
 8001392:	d111      	bne.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139e:	085b      	lsrs	r3, r3, #1
 80013a0:	3b01      	subs	r3, #1
 80013a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d107      	bne.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0cc      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e0:	4b68      	ldr	r3, [pc, #416]	@ (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d90c      	bls.n	8001408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b65      	ldr	r3, [pc, #404]	@ (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f6:	4b63      	ldr	r3, [pc, #396]	@ (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d001      	beq.n	8001408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0b8      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001420:	4b59      	ldr	r3, [pc, #356]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a58      	ldr	r2, [pc, #352]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800142a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001438:	4b53      	ldr	r3, [pc, #332]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a52      	ldr	r2, [pc, #328]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001444:	4b50      	ldr	r3, [pc, #320]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	494d      	ldr	r1, [pc, #308]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	4313      	orrs	r3, r2
 8001454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d044      	beq.n	80014ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d107      	bne.n	800147a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	4b47      	ldr	r3, [pc, #284]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d119      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e07f      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d003      	beq.n	800148a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001486:	2b03      	cmp	r3, #3
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148a:	4b3f      	ldr	r3, [pc, #252]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e06f      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	4b3b      	ldr	r3, [pc, #236]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e067      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014aa:	4b37      	ldr	r3, [pc, #220]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f023 0203 	bic.w	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4934      	ldr	r1, [pc, #208]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014bc:	f7ff fa5a 	bl	8000974 <HAL_GetTick>
 80014c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	e00a      	b.n	80014da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c4:	f7ff fa56 	bl	8000974 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e04f      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	4b2b      	ldr	r3, [pc, #172]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 020c 	and.w	r2, r3, #12
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d1eb      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014ec:	4b25      	ldr	r3, [pc, #148]	@ (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d20c      	bcs.n	8001514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001502:	4b20      	ldr	r3, [pc, #128]	@ (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d001      	beq.n	8001514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e032      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4916      	ldr	r1, [pc, #88]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	4313      	orrs	r3, r2
 8001530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d009      	beq.n	8001552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800153e:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	490e      	ldr	r1, [pc, #56]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001552:	f000 f821 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8001556:	4602      	mov	r2, r0
 8001558:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	490a      	ldr	r1, [pc, #40]	@ (800158c <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	5ccb      	ldrb	r3, [r1, r3]
 8001566:	fa22 f303 	lsr.w	r3, r2, r3
 800156a:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <HAL_RCC_ClockConfig+0x1c8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f9ba 	bl	80008ec <HAL_InitTick>

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00
 8001588:	40023800 	.word	0x40023800
 800158c:	08002028 	.word	0x08002028
 8001590:	20000000 	.word	0x20000000
 8001594:	20000004 	.word	0x20000004

08001598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800159c:	b090      	sub	sp, #64	@ 0x40
 800159e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80015a4:	2300      	movs	r3, #0
 80015a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015a8:	2300      	movs	r3, #0
 80015aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b0:	4b59      	ldr	r3, [pc, #356]	@ (8001718 <HAL_RCC_GetSysClockFreq+0x180>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d00d      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0x40>
 80015bc:	2b08      	cmp	r3, #8
 80015be:	f200 80a1 	bhi.w	8001704 <HAL_RCC_GetSysClockFreq+0x16c>
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <HAL_RCC_GetSysClockFreq+0x34>
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d003      	beq.n	80015d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80015ca:	e09b      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015cc:	4b53      	ldr	r3, [pc, #332]	@ (800171c <HAL_RCC_GetSysClockFreq+0x184>)
 80015ce:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80015d0:	e09b      	b.n	800170a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015d2:	4b53      	ldr	r3, [pc, #332]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x188>)
 80015d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015d6:	e098      	b.n	800170a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001718 <HAL_RCC_GetSysClockFreq+0x180>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001718 <HAL_RCC_GetSysClockFreq+0x180>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d028      	beq.n	8001640 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001718 <HAL_RCC_GetSysClockFreq+0x180>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	099b      	lsrs	r3, r3, #6
 80015f4:	2200      	movs	r2, #0
 80015f6:	623b      	str	r3, [r7, #32]
 80015f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001600:	2100      	movs	r1, #0
 8001602:	4b47      	ldr	r3, [pc, #284]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x188>)
 8001604:	fb03 f201 	mul.w	r2, r3, r1
 8001608:	2300      	movs	r3, #0
 800160a:	fb00 f303 	mul.w	r3, r0, r3
 800160e:	4413      	add	r3, r2
 8001610:	4a43      	ldr	r2, [pc, #268]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x188>)
 8001612:	fba0 1202 	umull	r1, r2, r0, r2
 8001616:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001618:	460a      	mov	r2, r1
 800161a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800161c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800161e:	4413      	add	r3, r2
 8001620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001624:	2200      	movs	r2, #0
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	61fa      	str	r2, [r7, #28]
 800162a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800162e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001632:	f7fe fdcf 	bl	80001d4 <__aeabi_uldivmod>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4613      	mov	r3, r2
 800163c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800163e:	e053      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001640:	4b35      	ldr	r3, [pc, #212]	@ (8001718 <HAL_RCC_GetSysClockFreq+0x180>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	2200      	movs	r2, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	617a      	str	r2, [r7, #20]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001652:	f04f 0b00 	mov.w	fp, #0
 8001656:	4652      	mov	r2, sl
 8001658:	465b      	mov	r3, fp
 800165a:	f04f 0000 	mov.w	r0, #0
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	0159      	lsls	r1, r3, #5
 8001664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001668:	0150      	lsls	r0, r2, #5
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	ebb2 080a 	subs.w	r8, r2, sl
 8001672:	eb63 090b 	sbc.w	r9, r3, fp
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001682:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001686:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800168a:	ebb2 0408 	subs.w	r4, r2, r8
 800168e:	eb63 0509 	sbc.w	r5, r3, r9
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	00eb      	lsls	r3, r5, #3
 800169c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016a0:	00e2      	lsls	r2, r4, #3
 80016a2:	4614      	mov	r4, r2
 80016a4:	461d      	mov	r5, r3
 80016a6:	eb14 030a 	adds.w	r3, r4, sl
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	eb45 030b 	adc.w	r3, r5, fp
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016be:	4629      	mov	r1, r5
 80016c0:	028b      	lsls	r3, r1, #10
 80016c2:	4621      	mov	r1, r4
 80016c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016c8:	4621      	mov	r1, r4
 80016ca:	028a      	lsls	r2, r1, #10
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016d2:	2200      	movs	r2, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	60fa      	str	r2, [r7, #12]
 80016d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016dc:	f7fe fd7a 	bl	80001d4 <__aeabi_uldivmod>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4613      	mov	r3, r2
 80016e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	0c1b      	lsrs	r3, r3, #16
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	3301      	adds	r3, #1
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80016f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001700:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001702:	e002      	b.n	800170a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001704:	4b05      	ldr	r3, [pc, #20]	@ (800171c <HAL_RCC_GetSysClockFreq+0x184>)
 8001706:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800170a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800170c:	4618      	mov	r0, r3
 800170e:	3740      	adds	r7, #64	@ 0x40
 8001710:	46bd      	mov	sp, r7
 8001712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	00f42400 	.word	0x00f42400
 8001720:	017d7840 	.word	0x017d7840

08001724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001728:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <HAL_RCC_GetHCLKFreq+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000000 	.word	0x20000000

0800173c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001740:	f7ff fff0 	bl	8001724 <HAL_RCC_GetHCLKFreq>
 8001744:	4602      	mov	r2, r0
 8001746:	4b05      	ldr	r3, [pc, #20]	@ (800175c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	0a9b      	lsrs	r3, r3, #10
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	4903      	ldr	r1, [pc, #12]	@ (8001760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001752:	5ccb      	ldrb	r3, [r1, r3]
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001758:	4618      	mov	r0, r3
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	08002038 	.word	0x08002038

08001764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001768:	f7ff ffdc 	bl	8001724 <HAL_RCC_GetHCLKFreq>
 800176c:	4602      	mov	r2, r0
 800176e:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	0b5b      	lsrs	r3, r3, #13
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	4903      	ldr	r1, [pc, #12]	@ (8001788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800177a:	5ccb      	ldrb	r3, [r1, r3]
 800177c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001780:	4618      	mov	r0, r3
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40023800 	.word	0x40023800
 8001788:	08002038 	.word	0x08002038

0800178c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e042      	b.n	8001824 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d106      	bne.n	80017b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7fe ffc4 	bl	8000740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2224      	movs	r2, #36	@ 0x24
 80017bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80017ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f973 	bl	8001abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80017e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80017f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001804:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2220      	movs	r2, #32
 8001810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2220      	movs	r2, #32
 8001818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	@ 0x28
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	4613      	mov	r3, r2
 800183a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b20      	cmp	r3, #32
 800184a:	d175      	bne.n	8001938 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <HAL_UART_Transmit+0x2c>
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e06e      	b.n	800193a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2221      	movs	r2, #33	@ 0x21
 8001866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800186a:	f7ff f883 	bl	8000974 <HAL_GetTick>
 800186e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	88fa      	ldrh	r2, [r7, #6]
 8001874:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	88fa      	ldrh	r2, [r7, #6]
 800187a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001884:	d108      	bne.n	8001898 <HAL_UART_Transmit+0x6c>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d104      	bne.n	8001898 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	e003      	b.n	80018a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80018a0:	e02e      	b.n	8001900 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2200      	movs	r2, #0
 80018aa:	2180      	movs	r1, #128	@ 0x80
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 f848 	bl	8001942 <UART_WaitOnFlagUntilTimeout>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2220      	movs	r2, #32
 80018bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e03a      	b.n	800193a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10b      	bne.n	80018e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	3302      	adds	r3, #2
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	e007      	b.n	80018f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	781a      	ldrb	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	3301      	adds	r3, #1
 80018f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001904:	b29b      	uxth	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1cb      	bne.n	80018a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2200      	movs	r2, #0
 8001912:	2140      	movs	r1, #64	@ 0x40
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f814 	bl	8001942 <UART_WaitOnFlagUntilTimeout>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2220      	movs	r2, #32
 8001924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e006      	b.n	800193a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2220      	movs	r2, #32
 8001930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	e000      	b.n	800193a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001938:	2302      	movs	r3, #2
  }
}
 800193a:	4618      	mov	r0, r3
 800193c:	3720      	adds	r7, #32
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	4613      	mov	r3, r2
 8001950:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001952:	e03b      	b.n	80019cc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195a:	d037      	beq.n	80019cc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800195c:	f7ff f80a 	bl	8000974 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	6a3a      	ldr	r2, [r7, #32]
 8001968:	429a      	cmp	r2, r3
 800196a:	d302      	bcc.n	8001972 <UART_WaitOnFlagUntilTimeout+0x30>
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e03a      	b.n	80019ec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d023      	beq.n	80019cc <UART_WaitOnFlagUntilTimeout+0x8a>
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b80      	cmp	r3, #128	@ 0x80
 8001988:	d020      	beq.n	80019cc <UART_WaitOnFlagUntilTimeout+0x8a>
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b40      	cmp	r3, #64	@ 0x40
 800198e:	d01d      	beq.n	80019cc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b08      	cmp	r3, #8
 800199c:	d116      	bne.n	80019cc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 f81d 	bl	80019f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2208      	movs	r2, #8
 80019be:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e00f      	b.n	80019ec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	4013      	ands	r3, r2
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	429a      	cmp	r2, r3
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d0b4      	beq.n	8001954 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b095      	sub	sp, #84	@ 0x54
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	330c      	adds	r3, #12
 8001a02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a06:	e853 3f00 	ldrex	r3, [r3]
 8001a0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	330c      	adds	r3, #12
 8001a1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8001a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001a22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a24:	e841 2300 	strex	r3, r2, [r1]
 8001a28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1e5      	bne.n	80019fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3314      	adds	r3, #20
 8001a36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	e853 3f00 	ldrex	r3, [r3]
 8001a3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3314      	adds	r3, #20
 8001a4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a58:	e841 2300 	strex	r3, r2, [r1]
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1e5      	bne.n	8001a30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d119      	bne.n	8001aa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	330c      	adds	r3, #12
 8001a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	e853 3f00 	ldrex	r3, [r3]
 8001a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f023 0310 	bic.w	r3, r3, #16
 8001a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	330c      	adds	r3, #12
 8001a8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a8c:	61ba      	str	r2, [r7, #24]
 8001a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a90:	6979      	ldr	r1, [r7, #20]
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	e841 2300 	strex	r3, r2, [r1]
 8001a98:	613b      	str	r3, [r7, #16]
   return(result);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1e5      	bne.n	8001a6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001aae:	bf00      	nop
 8001ab0:	3754      	adds	r7, #84	@ 0x54
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac0:	b0c0      	sub	sp, #256	@ 0x100
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ad8:	68d9      	ldr	r1, [r3, #12]
 8001ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	ea40 0301 	orr.w	r3, r0, r1
 8001ae4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001b14:	f021 010c 	bic.w	r1, r1, #12
 8001b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001b22:	430b      	orrs	r3, r1
 8001b24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b36:	6999      	ldr	r1, [r3, #24]
 8001b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	ea40 0301 	orr.w	r3, r0, r1
 8001b42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4b8f      	ldr	r3, [pc, #572]	@ (8001d88 <UART_SetConfig+0x2cc>)
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d005      	beq.n	8001b5c <UART_SetConfig+0xa0>
 8001b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4b8d      	ldr	r3, [pc, #564]	@ (8001d8c <UART_SetConfig+0x2d0>)
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d104      	bne.n	8001b66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b5c:	f7ff fe02 	bl	8001764 <HAL_RCC_GetPCLK2Freq>
 8001b60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001b64:	e003      	b.n	8001b6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001b66:	f7ff fde9 	bl	800173c <HAL_RCC_GetPCLK1Freq>
 8001b6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b78:	f040 810c 	bne.w	8001d94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b80:	2200      	movs	r2, #0
 8001b82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001b86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001b8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001b8e:	4622      	mov	r2, r4
 8001b90:	462b      	mov	r3, r5
 8001b92:	1891      	adds	r1, r2, r2
 8001b94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001b96:	415b      	adcs	r3, r3
 8001b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	eb12 0801 	adds.w	r8, r2, r1
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	eb43 0901 	adc.w	r9, r3, r1
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bbe:	4690      	mov	r8, r2
 8001bc0:	4699      	mov	r9, r3
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	eb18 0303 	adds.w	r3, r8, r3
 8001bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001bcc:	462b      	mov	r3, r5
 8001bce:	eb49 0303 	adc.w	r3, r9, r3
 8001bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001be2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001be6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001bea:	460b      	mov	r3, r1
 8001bec:	18db      	adds	r3, r3, r3
 8001bee:	653b      	str	r3, [r7, #80]	@ 0x50
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	eb42 0303 	adc.w	r3, r2, r3
 8001bf6:	657b      	str	r3, [r7, #84]	@ 0x54
 8001bf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001bfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001c00:	f7fe fae8 	bl	80001d4 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4b61      	ldr	r3, [pc, #388]	@ (8001d90 <UART_SetConfig+0x2d4>)
 8001c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	011c      	lsls	r4, r3, #4
 8001c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c16:	2200      	movs	r2, #0
 8001c18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001c1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001c20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001c24:	4642      	mov	r2, r8
 8001c26:	464b      	mov	r3, r9
 8001c28:	1891      	adds	r1, r2, r2
 8001c2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001c2c:	415b      	adcs	r3, r3
 8001c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c34:	4641      	mov	r1, r8
 8001c36:	eb12 0a01 	adds.w	sl, r2, r1
 8001c3a:	4649      	mov	r1, r9
 8001c3c:	eb43 0b01 	adc.w	fp, r3, r1
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c54:	4692      	mov	sl, r2
 8001c56:	469b      	mov	fp, r3
 8001c58:	4643      	mov	r3, r8
 8001c5a:	eb1a 0303 	adds.w	r3, sl, r3
 8001c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001c62:	464b      	mov	r3, r9
 8001c64:	eb4b 0303 	adc.w	r3, fp, r3
 8001c68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001c78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001c7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001c80:	460b      	mov	r3, r1
 8001c82:	18db      	adds	r3, r3, r3
 8001c84:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c86:	4613      	mov	r3, r2
 8001c88:	eb42 0303 	adc.w	r3, r2, r3
 8001c8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001c96:	f7fe fa9d 	bl	80001d4 <__aeabi_uldivmod>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8001d90 <UART_SetConfig+0x2d4>)
 8001ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2264      	movs	r2, #100	@ 0x64
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	1acb      	subs	r3, r1, r3
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001cb6:	4b36      	ldr	r3, [pc, #216]	@ (8001d90 <UART_SetConfig+0x2d4>)
 8001cb8:	fba3 2302 	umull	r2, r3, r3, r2
 8001cbc:	095b      	lsrs	r3, r3, #5
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001cc4:	441c      	add	r4, r3
 8001cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001cd0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001cd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001cd8:	4642      	mov	r2, r8
 8001cda:	464b      	mov	r3, r9
 8001cdc:	1891      	adds	r1, r2, r2
 8001cde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001ce0:	415b      	adcs	r3, r3
 8001ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ce4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ce8:	4641      	mov	r1, r8
 8001cea:	1851      	adds	r1, r2, r1
 8001cec:	6339      	str	r1, [r7, #48]	@ 0x30
 8001cee:	4649      	mov	r1, r9
 8001cf0:	414b      	adcs	r3, r1
 8001cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001d00:	4659      	mov	r1, fp
 8001d02:	00cb      	lsls	r3, r1, #3
 8001d04:	4651      	mov	r1, sl
 8001d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d0a:	4651      	mov	r1, sl
 8001d0c:	00ca      	lsls	r2, r1, #3
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	4603      	mov	r3, r0
 8001d14:	4642      	mov	r2, r8
 8001d16:	189b      	adds	r3, r3, r2
 8001d18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d1c:	464b      	mov	r3, r9
 8001d1e:	460a      	mov	r2, r1
 8001d20:	eb42 0303 	adc.w	r3, r2, r3
 8001d24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001d34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001d38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	18db      	adds	r3, r3, r3
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d42:	4613      	mov	r3, r2
 8001d44:	eb42 0303 	adc.w	r3, r2, r3
 8001d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001d52:	f7fe fa3f 	bl	80001d4 <__aeabi_uldivmod>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <UART_SetConfig+0x2d4>)
 8001d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	2164      	movs	r1, #100	@ 0x64
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	3332      	adds	r3, #50	@ 0x32
 8001d6e:	4a08      	ldr	r2, [pc, #32]	@ (8001d90 <UART_SetConfig+0x2d4>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	f003 0207 	and.w	r2, r3, #7
 8001d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4422      	add	r2, r4
 8001d82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001d84:	e106      	b.n	8001f94 <UART_SetConfig+0x4d8>
 8001d86:	bf00      	nop
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40011400 	.word	0x40011400
 8001d90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001d9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001da2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001da6:	4642      	mov	r2, r8
 8001da8:	464b      	mov	r3, r9
 8001daa:	1891      	adds	r1, r2, r2
 8001dac:	6239      	str	r1, [r7, #32]
 8001dae:	415b      	adcs	r3, r3
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001db6:	4641      	mov	r1, r8
 8001db8:	1854      	adds	r4, r2, r1
 8001dba:	4649      	mov	r1, r9
 8001dbc:	eb43 0501 	adc.w	r5, r3, r1
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	00eb      	lsls	r3, r5, #3
 8001dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dce:	00e2      	lsls	r2, r4, #3
 8001dd0:	4614      	mov	r4, r2
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	4643      	mov	r3, r8
 8001dd6:	18e3      	adds	r3, r4, r3
 8001dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ddc:	464b      	mov	r3, r9
 8001dde:	eb45 0303 	adc.w	r3, r5, r3
 8001de2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001df2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e02:	4629      	mov	r1, r5
 8001e04:	008b      	lsls	r3, r1, #2
 8001e06:	4621      	mov	r1, r4
 8001e08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	008a      	lsls	r2, r1, #2
 8001e10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001e14:	f7fe f9de 	bl	80001d4 <__aeabi_uldivmod>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4b60      	ldr	r3, [pc, #384]	@ (8001fa0 <UART_SetConfig+0x4e4>)
 8001e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	011c      	lsls	r4, r3, #4
 8001e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001e34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001e38:	4642      	mov	r2, r8
 8001e3a:	464b      	mov	r3, r9
 8001e3c:	1891      	adds	r1, r2, r2
 8001e3e:	61b9      	str	r1, [r7, #24]
 8001e40:	415b      	adcs	r3, r3
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e48:	4641      	mov	r1, r8
 8001e4a:	1851      	adds	r1, r2, r1
 8001e4c:	6139      	str	r1, [r7, #16]
 8001e4e:	4649      	mov	r1, r9
 8001e50:	414b      	adcs	r3, r1
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e60:	4659      	mov	r1, fp
 8001e62:	00cb      	lsls	r3, r1, #3
 8001e64:	4651      	mov	r1, sl
 8001e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e6a:	4651      	mov	r1, sl
 8001e6c:	00ca      	lsls	r2, r1, #3
 8001e6e:	4610      	mov	r0, r2
 8001e70:	4619      	mov	r1, r3
 8001e72:	4603      	mov	r3, r0
 8001e74:	4642      	mov	r2, r8
 8001e76:	189b      	adds	r3, r3, r2
 8001e78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001e7c:	464b      	mov	r3, r9
 8001e7e:	460a      	mov	r2, r1
 8001e80:	eb42 0303 	adc.w	r3, r2, r3
 8001e84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001ea0:	4649      	mov	r1, r9
 8001ea2:	008b      	lsls	r3, r1, #2
 8001ea4:	4641      	mov	r1, r8
 8001ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001eaa:	4641      	mov	r1, r8
 8001eac:	008a      	lsls	r2, r1, #2
 8001eae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001eb2:	f7fe f98f 	bl	80001d4 <__aeabi_uldivmod>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4b38      	ldr	r3, [pc, #224]	@ (8001fa0 <UART_SetConfig+0x4e4>)
 8001ebe:	fba3 2301 	umull	r2, r3, r3, r1
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2264      	movs	r2, #100	@ 0x64
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	1acb      	subs	r3, r1, r3
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	3332      	adds	r3, #50	@ 0x32
 8001ed0:	4a33      	ldr	r2, [pc, #204]	@ (8001fa0 <UART_SetConfig+0x4e4>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001edc:	441c      	add	r4, r3
 8001ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ee6:	677a      	str	r2, [r7, #116]	@ 0x74
 8001ee8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001eec:	4642      	mov	r2, r8
 8001eee:	464b      	mov	r3, r9
 8001ef0:	1891      	adds	r1, r2, r2
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	415b      	adcs	r3, r3
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001efc:	4641      	mov	r1, r8
 8001efe:	1851      	adds	r1, r2, r1
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	4649      	mov	r1, r9
 8001f04:	414b      	adcs	r3, r1
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f14:	4659      	mov	r1, fp
 8001f16:	00cb      	lsls	r3, r1, #3
 8001f18:	4651      	mov	r1, sl
 8001f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f1e:	4651      	mov	r1, sl
 8001f20:	00ca      	lsls	r2, r1, #3
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	4642      	mov	r2, r8
 8001f2a:	189b      	adds	r3, r3, r2
 8001f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f2e:	464b      	mov	r3, r9
 8001f30:	460a      	mov	r2, r1
 8001f32:	eb42 0303 	adc.w	r3, r2, r3
 8001f36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f42:	667a      	str	r2, [r7, #100]	@ 0x64
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001f50:	4649      	mov	r1, r9
 8001f52:	008b      	lsls	r3, r1, #2
 8001f54:	4641      	mov	r1, r8
 8001f56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f5a:	4641      	mov	r1, r8
 8001f5c:	008a      	lsls	r2, r1, #2
 8001f5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001f62:	f7fe f937 	bl	80001d4 <__aeabi_uldivmod>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa0 <UART_SetConfig+0x4e4>)
 8001f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f70:	095b      	lsrs	r3, r3, #5
 8001f72:	2164      	movs	r1, #100	@ 0x64
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	3332      	adds	r3, #50	@ 0x32
 8001f7e:	4a08      	ldr	r2, [pc, #32]	@ (8001fa0 <UART_SetConfig+0x4e4>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	f003 020f 	and.w	r2, r3, #15
 8001f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4422      	add	r2, r4
 8001f92:	609a      	str	r2, [r3, #8]
}
 8001f94:	bf00      	nop
 8001f96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fa0:	51eb851f 	.word	0x51eb851f

08001fa4 <memset>:
 8001fa4:	4402      	add	r2, r0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d100      	bne.n	8001fae <memset+0xa>
 8001fac:	4770      	bx	lr
 8001fae:	f803 1b01 	strb.w	r1, [r3], #1
 8001fb2:	e7f9      	b.n	8001fa8 <memset+0x4>

08001fb4 <__libc_init_array>:
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8001fec <__libc_init_array+0x38>)
 8001fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8001ff0 <__libc_init_array+0x3c>)
 8001fba:	1b64      	subs	r4, r4, r5
 8001fbc:	10a4      	asrs	r4, r4, #2
 8001fbe:	2600      	movs	r6, #0
 8001fc0:	42a6      	cmp	r6, r4
 8001fc2:	d109      	bne.n	8001fd8 <__libc_init_array+0x24>
 8001fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8001ff4 <__libc_init_array+0x40>)
 8001fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8001ff8 <__libc_init_array+0x44>)
 8001fc8:	f000 f818 	bl	8001ffc <_init>
 8001fcc:	1b64      	subs	r4, r4, r5
 8001fce:	10a4      	asrs	r4, r4, #2
 8001fd0:	2600      	movs	r6, #0
 8001fd2:	42a6      	cmp	r6, r4
 8001fd4:	d105      	bne.n	8001fe2 <__libc_init_array+0x2e>
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
 8001fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fdc:	4798      	blx	r3
 8001fde:	3601      	adds	r6, #1
 8001fe0:	e7ee      	b.n	8001fc0 <__libc_init_array+0xc>
 8001fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fe6:	4798      	blx	r3
 8001fe8:	3601      	adds	r6, #1
 8001fea:	e7f2      	b.n	8001fd2 <__libc_init_array+0x1e>
 8001fec:	08002048 	.word	0x08002048
 8001ff0:	08002048 	.word	0x08002048
 8001ff4:	08002048 	.word	0x08002048
 8001ff8:	0800204c 	.word	0x0800204c

08001ffc <_init>:
 8001ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffe:	bf00      	nop
 8002000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002002:	bc08      	pop	{r3}
 8002004:	469e      	mov	lr, r3
 8002006:	4770      	bx	lr

08002008 <_fini>:
 8002008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200a:	bf00      	nop
 800200c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800200e:	bc08      	pop	{r3}
 8002010:	469e      	mov	lr, r3
 8002012:	4770      	bx	lr
